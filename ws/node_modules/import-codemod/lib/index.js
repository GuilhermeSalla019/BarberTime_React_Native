Object.defineProperty(exports, "__esModule", {
  value: true
});

exports['default'] = function (file, api, options) {
  var j = api.jscodeshift;
  var root = j(file.source);

  var config = void 0;
  try {
    var configPath = _path2['default'].resolve(options.config);
    config = require(configPath); // eslint-disable-line
  } catch (e) {
    console.log('Config not found');
    return file.source;
  }

  var findImport = function () {
    function findImport(name) {
      return root.find(j.ImportDeclaration, {
        source: {
          type: 'Literal',
          value: name
        }
      });
    }

    return findImport;
  }();

  var emptyImport = function () {
    function emptyImport(theImport) {
      return theImport && !exists(theImport.find(j.ImportSpecifier)) && !exists(theImport.find(j.ImportDefaultSpecifier));
    }

    return emptyImport;
  }();

  // create an import declaration
  var makeImport = function () {
    function makeImport(_ref) {
      var _ref$members = _ref.members,
          members = _ref$members === undefined ? [] : _ref$members,
          module = _ref.module,
          _ref$defaultName = _ref.defaultName,
          defaultName = _ref$defaultName === undefined ? null : _ref$defaultName;

      var importSpecifiers = members.map(function (x) {
        return j.importSpecifier(j.identifier(x));
      });

      var specifiers = defaultName ? [j.importDefaultSpecifier(j.identifier(defaultName))].concat(_toConsumableArray(importSpecifiers)) : importSpecifiers;

      return j.importDeclaration(specifiers, j.literal(module));
    }

    return makeImport;
  }();

  // collection members that match a predicate
  var membersMatchingPred = function () {
    function membersMatchingPred(collection, pred) {
      var removeMatches = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;

      var results = [];

      var matches = collection.find(j.ImportSpecifier).filter(pred).forEach(function (x) {
        return results.push(x.node.local.name);
      });

      if (removeMatches) {
        matches.remove();
      }

      return results;
    }

    return membersMatchingPred;
  }();

  if (config.ignoreMark) {
    if (exists((root.find(j.Comment) || []).filter(function (x) {
      return x.value.value.includes(config.ignoreMark);
    }))) {
      return file.source;
    }
  }

  (config.mappings || []).forEach(function (mapping) {
    var module = mapping.module,
        specifiers = mapping.specifiers;

    var fromImport = findImport(module.from);
    var toImport = findImport(module.to);

    var fromModules = Array.isArray(specifiers) ? specifiers : Object.keys(specifiers);

    var containsWildcard = fromModules.includes('*');

    var existsInModule = function () {
      function existsInModule(member) {
        return containsWildcard ? true : fromModules.includes(member.node.local.name);
      }

      return existsInModule;
    }();

    var lookupTargetImport = function () {
      function lookupTargetImport(name) {
        return Array.isArray(specifiers) ? name : specifiers[name];
      }

      return lookupTargetImport;
    }();

    var shouldBeMoved = [].concat(_toConsumableArray(membersMatchingPred(fromImport, existsInModule, true)));

    var defaultName = null;

    var defaultToNamed = false;

    if (fromModules.includes('default')) {
      var defaults = findImport(module.from).find(j.ImportDefaultSpecifier);

      var toDefault = lookupTargetImport('default');
      if (toDefault === 'default') {
        // TODO: lol how do I just find one?
        defaults.forEach(function (x) {
          defaultName = x.node.local.name;
        });
      } else {
        defaultToNamed = true;
      }

      defaults.remove();
    }

    if (!exists(shouldBeMoved) && !defaultToNamed && !defaultName) {
      return file.source;
    }

    var newImports = null;
    if (defaultToNamed) {
      newImports = ['default'].concat(_toConsumableArray(shouldBeMoved)).map(lookupTargetImport);
    } else {
      newImports = shouldBeMoved.map(lookupTargetImport);
    }

    // if we already have an import declaration for the target
    if (exists(toImport)) {
      var existingMembers = membersMatchingPred(toImport, function () {
        return true;
      });
      var targetMembers = uniq([].concat(_toConsumableArray(existingMembers), _toConsumableArray(newImports)));
      var newImport = makeImport({
        members: targetMembers,
        module: module.to,
        defaultName: defaultName
      });

      toImport.replaceWith(newImport);
    } else {
      var _newImport = makeImport({
        members: newImports,
        module: module.to,
        defaultName: defaultName
      });
      fromImport.insertAfter(_newImport);
    }

    if (emptyImport(findImport(module.from))) {
      fromImport.remove();
    }

    return false;
  });

  return root.toSource({ quote: 'single' });
};

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

var onlyUnique = function onlyUnique(value, index, self) {
  return self.indexOf(value) === index;
};
var uniq = function uniq(xs) {
  return xs.filter(onlyUnique);
};

var exists = function exists(x) {
  return x.length > 0;
};

module.exports = exports['default'];