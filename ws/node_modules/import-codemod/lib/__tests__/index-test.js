var _path = require('path');

var _path2 = _interopRequireDefault(_path);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

jest.autoMockOff(); /* eslint-env jest */

var defineTest = require('jscodeshift/dist/testUtils').defineTest;

beforeEach(function () {
  return jest.resetModules();
});
var opts = { config: './config.js' };

var configPath = _path2['default'].resolve(process.cwd(), opts.config);

describe('config as an array', function () {
  describe('named imports', function () {
    beforeEach(function () {
      jest.doMock(configPath, function () {
        return {
          mappings: [{
            module: {
              from: 'beatles',
              to: 'the-beatles'
            },
            specifiers: ['John', 'Paul', 'George']
          }]
        };
      }, { virtual: true });
    });
    defineTest(__dirname, 'index', opts, 'NoExistingTarget');
    defineTest(__dirname, 'index', opts, 'ExistingTarget');
    defineTest(__dirname, 'index', opts, 'EmptyFrom');
  });

  describe('default imports', function () {
    beforeEach(function () {
      jest.doMock(configPath, function () {
        return {
          mappings: [{
            module: {
              from: 'beatles',
              to: 'the-beatles'
            },
            specifiers: ['default']
          }]
        };
      }, { virtual: true });
    });
    defineTest(__dirname, 'index', opts, 'DefaultToDefault');
  });
});

describe('config as an object', function () {
  describe('named imports', function () {
    describe('no renames', function () {
      beforeEach(function () {
        jest.doMock(configPath, function () {
          return {
            mappings: [{
              module: {
                from: 'beatles',
                to: 'the-beatles'
              },
              specifiers: {
                John: 'John',
                Paul: 'Paul',
                George: 'George'
              }
            }]
          };
        });
      });
      defineTest(__dirname, 'index', opts, 'NoExistingTarget');
      defineTest(__dirname, 'index', opts, 'ExistingTarget');
      defineTest(__dirname, 'index', opts, 'EmptyFrom');
    });
    // defaults

    describe('w/ renames', function () {
      beforeEach(function () {
        jest.doMock(configPath, function () {
          return {
            mappings: [{
              module: {
                from: 'beatles',
                to: 'the-beatles'
              },
              specifiers: {
                John: 'Lennon',
                Paul: 'McCartney',
                George: 'Harrison'
              }
            }]
          };
        });
      });
      defineTest(__dirname, 'index', opts, 'Renames');
    });
  });

  describe('default import to default import', function () {
    beforeEach(function () {
      jest.doMock(configPath, function () {
        return {
          mappings: [{
            module: {
              from: 'beatles',
              to: 'the-beatles'
            },
            specifiers: {
              'default': 'default'
            }
          }]
        };
      });
    });
    defineTest(__dirname, 'index', opts, 'DefaultToDefault');
  });

  describe('default import to named import', function () {
    beforeEach(function () {
      jest.doMock(configPath, function () {
        return {
          mappings: [{
            module: {
              from: 'beatles',
              to: 'bands'
            },
            specifiers: {
              'default': 'Beatles'
            }
          }]
        };
      });
    });
    defineTest(__dirname, 'index', opts, 'DefaultToNamed');
  });
});

describe('pattern', function () {
  beforeEach(function () {
    jest.doMock(configPath, function () {
      return {
        mappings: [{
          module: {
            from: 'beatles',
            to: 'the-beatles'
          },
          specifiers: ['*']
        }]
      };
    });
  });
  defineTest(__dirname, 'index', opts, 'Pattern');
});

describe('config from a path', function () {
  // const opts = { config: './src/__tests__/config.js' };
  // defineTest(__dirname, 'index', opts, 'EmptyFrom');
});

describe('config ignore', function () {
  beforeEach(function () {
    jest.doMock(configPath, function () {
      return {
        ignoreMark: '@ignoreMe'
      };
    });
  });
  defineTest(__dirname, 'index', opts, 'Ignore');
});